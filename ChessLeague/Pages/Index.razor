@page "/"
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http



<div class="row header">
    <div class="col-auto">
        @* <h2>All Time Stats</h2> *@
    </div>
    <div class="col text-center" id="season-header">
            @if (seasonsList == null || seasonsList.Length == 0)
            {
                <div class="dropdown">
                    <button class="dropdown-item btn btn-primary" style="margin-bottom:20px;" @onclick="modalCreateSeason.Show">Add New Season</button>
                </div>
            }else{
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" @onclick="toggleSeasonList" style="width:auto">
                        @getSeasonByID( Convert.ToUInt32(selectedSeason)).Name
                    </button>
                    <div class="dropdown-menu @displaySeasonList" aria-labelledby="dropdownMenuButton">
                        
                        @foreach (var season in seasonsList)
                        {
                            <button class="dropdown-item" value="@season.ID" @onclick="(() => getParticitpants(season.ID))"  >@season.Name</button>
                        }
                        <button class="dropdown-item btn btn-primary" @onclick="modalCreateSeason.Show">Add New Season</button>
                    </div>
                    
                </div>
                
            }
    </div>
</div>

@* <div class="row">
    <div class="col">

    </div>
    <div class="col">

    </div>
</div> *@
<div class="standings-wrapper">
    
    <div class="row">
        <div class="col name-col">
            Player
        </div>
        <div class="col"  style="display: @((advancedView ? "block;" : "none;"))" >
            Player ID
        </div>
        <div class="col-auto rating-col">
            Rating
        </div>
        <div class="col rating-col"  style="display: @((advancedView ? "block;" : "none;"))" >
            Highest Rating
        </div>
        <div class="col record-col"  style="display: @((advancedView ? "block;" : "none;"))" >
            Win Streak
        </div>
        <div class="col record-col"  style="display: @((advancedView ? "block;" : "none;"))" >
            Highest Win Streak
        </div>
        <div class="col record-col">
            Wins
        </div>
        <div class="col record-col">
            Losses
        </div>
        <div class="col record-col">
            Draws
        </div>
    </div>

    @if (players == null || players.Length == 0)
    {
        <div class="row">
            <div class="col">
                No Players Found
            </div>
        </div>
    }
    else
    {
        @foreach (var player in players)
        {
            <div class="row">
                <div class="col name-col">
                    @player.Player.Name
                </div>
                <div class="col"  style="display: @((advancedView ? "block;" : "none;"))" >
                    @player.Player.Id
                </div>
                <div class="col-auto rating-col">
                    @player.Stats.Rating
                </div>
                <div class="col rating-col"  style="display: @((advancedView ? "block;" : "none;"))" >
                    @player.Stats.HighestRating
                </div>
                <div class="col record-col">
                    @player.Stats.Wins
                </div>
                <div class="col record-col">
                    @player.Stats.Losses
                </div>
                <div class="col record-col">
                    @player.Stats.Draws
                </div>
                <div class="col-auto float-right"  style="margin-left: auto;">
                    <button @onclick="(() => StartGame(player.Player))" class="btn btn-primary" >@((game.Light != 0 ?  game.Light == player.Player.Id ? "End Game" : "Player 2" : "Start Game"))</button>
                </div>
                @* <div class="col-auto float-right"  style="margin-left: auto;">
                    <button @onclick="(() => AdvancedViewOpen(player.Player))" class="btn btn-primary" >@((advancedView ? "Close View" : "Advanced view"))</button>
                </div> *@
            </div>
        }
    }
    <div class="row">
        <div class="col-auto"  style="margin-left: auto;">
            
                @if (allPlayers == null )
                {
                    
                    <div class="dropdown">
                        <button class="btn dropdown-toggle"  style="width:auto">
                            No Players Found
                        </button>
                    </div>
                }else{
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" @onclick="toggleAddPlayerList" style="width:auto">
                            Add Player to Season
                        </button>
                        <div class="dropdown-menu @displayAddPlayerList" aria-labelledby="dropdownMenuButton">
                            @foreach (var player in allPlayers)
                            {
                                if (!containsPlayerId(players, player.Id)){
                                    <button class="dropdown-item" value="@player.Id" @onclick="(e) => addPlayerToSeason(e, player.Id)">@player.Name</button>
                                }
                            }
                        </div>
                    </div>
                }
        </div>
    </div>
</div>
<button class="btn btn-primary" @onclick="modalPlayer.Show">Register New Player</button>
<a href="/CreateSeason" asp-page="/CreateSeason" class="btn btn-primary">Create Season</a>
@* <a href="/Tournament" asp-page="/Tournament" class="btn btn-primary">Go to Season</a> *@
@* <a href="/CreateTournament" asp-page="/CreateTournament" class="btn btn-primary">Create Tournament</a> *@
@* <a href="/Tournament" asp-page="/Tournament" class="btn btn-primary">Go to Tournament Page</a> *@


<!-- Register a Player --> 
<Modal @ref="modalPlayer" ModalTitle="Register a Player" >
    <RegisterPlayer modal="@modalPlayer">
    </RegisterPlayer>
</Modal>
<!-- Game a Player --> 
<Modal @ref="modalGame" ModalTitle="Register Game" >
    <RegisterGame modal="@modalGame" selectedSeason="@selectedSeason" game="game" p1="@p1" p2="@p2">
    </RegisterGame>
</Modal>

<!-- Game a Player --> 
<Modal @ref="modalCreateSeason" ModalTitle="Create Season" >
    <CreateSeason modal="@modalCreateSeason" >
    </CreateSeason>
</Modal>

<!-- Live Game -->

@code {
    // List of players for standings
    public PlayerStats[]? players = null;
    public Season[]? seasonsList = null;
    public string selectedSeason = "loading"; 
    private Game game = new Game();

    public Player p1 = new Player() ;
    public Player p2 = new Player();
    private string displayAddPlayerList = "";
    private string displaySeasonList = "";

    // Season the screen is displaying
    private string errorMessage = string.Empty;
    private bool advancedView   = false;
    /* Sign Up Variables*/
    private Modal modalPlayer = new Modal();
    public Modal modalGame = new Modal();
    private Modal modalCreateSeason = new Modal();

    // List of all players, for add player to season list
    private List<Player> allPlayers = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get list of seasons
            var response = await Http.GetAsync("https://lrs-chess-ratings.com/seasons?with_deleted=false&page_id=0");
            response.EnsureSuccessStatusCode();
            seasonsList = JsonSerializer.Deserialize<SeasonsResponse>(await response.Content.ReadAsStringAsync(),
                                                                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true }).Items;

            selectedSeason = seasonsList[seasonsList.Length-1].ID.ToString();

            // If there are seasons get the list of players for the season
            if (seasonsList.Length != 0 && seasonsList != null)
            {

                var response2 = await Http.PostAsync("https://lrs-chess-ratings.com/season/" + selectedSeason + ":getParticipants", new StringContent("", System.Text.Encoding.UTF8, "application/json"));
                response2.EnsureSuccessStatusCode();

                players = JsonSerializer.Deserialize<PlayerStats[]>(await response2.Content.ReadAsStringAsync(),
                                                                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                foreach (var player in players){
                    Console.WriteLine("PLayer: " + player.Player.Name);
                }

                var response3 = await Http.GetAsync("https://lrs-chess-ratings.com/players");
                response3.EnsureSuccessStatusCode();
                allPlayers = JsonSerializer.Deserialize<allPlayersResponse>(await response3.Content.ReadAsStringAsync(),
                                                                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }).Items.ToList();

            }
            
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error retrieving players. Please try again later.";
            // log or display the error message as needed
        }
        catch (JsonException ex)
        {
            errorMessage = "Error parsing player data. Please try again later.";
            // log or display the error message as needed
        }
        catch (IndexOutOfRangeException ex)
        {
            errorMessage = "No Seasons";
            // log or display the error message as needed
        }
        
        StateHasChanged(); 
        
    }
    public class SeasonsResponse
    {
        public Season[] Items { get; set; }
        public int NextPage { get; set; }
    }
    
    public class allPlayersResponse
    {
        public Player[] Items { get; set; }
        public int NextPage { get; set; }
    }


    private void StartGame(Player player){
        // Player has been click twice, then close end game
        if (game.Light == player.Id){
            game.Light = 0;
        }else
        // First Player has not been chosen
        if (game.Light == 0){
            game.Light = player.Id;
            p1 = player;
        }else {
            p2 = player;
            Console.WriteLine("p1:" + p1.Name);
            Console.WriteLine("p2:" + p2.Name);
            game.Dark = player.Id;
            modalGame.Show();
        }

    }
    private bool containsPlayerId(PlayerStats[] playerList, uint id){
        foreach (PlayerStats ps in playerList)
        {
            if (ps.Player.Id == id)
            {
                return true;
            }
        }
        return false;
    }
    private Player getPlayerByID(uint ID){
        if (players != null){
            foreach (var player in players)
            {
                if (player.Player.Id == ID ){
                    return player.Player;
                }
            }
        }
        
        return null;
    }
    private Season getSeasonByID(uint ID){
        if (seasonsList != null){
            foreach (var season in seasonsList)
            {
                if (season.ID == ID ){
                    return season;
                }
            }
        }
        
        return null;
    }
    public async void addPlayerToSeason(MouseEventArgs e, uint playerId){
        try
        {
            @* e.PreventDefault(); *@
            // If there are seasons get the list of players for the season
            var response = await Http.PostAsync("https://lrs-chess-ratings.com/season/" + selectedSeason + ":addPlayer?player_id=" + playerId , new StringContent("", System.Text.Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();

            players = JsonSerializer.Deserialize<PlayerStats[]>(await response.Content.ReadAsStringAsync(),
                                                                 new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            //Remove Player from all Players list
            @* foreach (var player in allPlayers){
                if (player.Id.ToString().CompareTo(playerId) == 0){
                    allPlayers.Remove(player);
                }
            } *@
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error retrieving players. Please try again later.";
            // log or display the error message as needed
        }
        catch (JsonException ex)
        {
            errorMessage = "Error parsing player data. Please try again later.";
            // log or display the error message as needed
        }
    
        StateHasChanged();
    }
    public async void getParticitpants(uint selectedSeason){
        try
        {
            // If there are seasons get the list of players for the season
            var response2 = await Http.PostAsync("https://lrs-chess-ratings.com/season/" + selectedSeason.ToString() + ":getParticipants", new StringContent("", System.Text.Encoding.UTF8, "application/json"));
            response2.EnsureSuccessStatusCode();

            players = JsonSerializer.Deserialize<PlayerStats[]>(await response2.Content.ReadAsStringAsync(),
                                                                 new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error retrieving players. Please try again later.";
            // log or display the error message as needed
        }
        catch (JsonException ex)
        {
            errorMessage = "Error parsing player data. Please try again later.";
            // log or display the error message as needed
        }
        StateHasChanged();
    }
    public async void getAllPlayersList(){
        try
        {
            // Get list of seasons
            var response = await Http.GetAsync("https://lrs-chess-ratings.com/players");
            response.EnsureSuccessStatusCode();
            allPlayers = JsonSerializer.Deserialize<allPlayersResponse>(await response.Content.ReadAsStringAsync(),
                                                                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }).Items.ToList();

            foreach (var p1 in allPlayers){
                foreach (var p2 in players){
                    if (p1.Id == p2.Player.Id){
                        allPlayers.Remove(p1);
                    }
                }
            }         
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error retrieving players. Please try again later.";
            // log or display the error message as needed
        }
        catch (JsonException ex)
        {
            errorMessage = "Error parsing player data. Please try again later.";
            // log or display the error message as needed
        }
    }
    private void toggleAddPlayerList(){
        if (displayAddPlayerList == "")
        {
            displayAddPlayerList = "show";
        }else
        {
            displayAddPlayerList = "";
        }
    }
    private void toggleSeasonList(){
        if (displaySeasonList == "")
        {
            displaySeasonList = "show";
        }else
        {
            displaySeasonList = "";
        }
    }

}
