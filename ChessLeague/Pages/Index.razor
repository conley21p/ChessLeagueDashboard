@page "/"
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http


<div class="row header">
    <div class="col-auto">
        @* <h2>All Time Stats</h2> *@
    </div>
    <div class="col text-center" id="season-header">
        <select value="@selectedSeason" @onchange="getParticitpants">
            @if (seasonsList == null)
            {
                <option value="loading">Loading Seasons...</option>
            }
            else if (seasonsList.Length == 0)
            {
                <p>No seasons found.</p>
            }else{
                @foreach (var season in seasonsList)
                {
                    <option value="@season.ID">@season.Name</option>
                }
            }
            <option value="addSeason" id="addSeasonBtn">
                <button class="dropdown-item btn btn-primary">Add New Season</button>
            </option>
        </select>
    </div>
</div>


@if (players == null)
{
    <p>Loading players...</p>
}
else if (players.Length == 0)
{
    <p>No players found.</p>
}
else
{
    <div class="standings-wrapper">
        
            <div class="row">
                <div class="col name-col">
                    Player
                </div>
                <div class="col"  style="display: @((advancedView ? "block;" : "none;"))" >
                    Player ID
                </div>
                <div class="col-auto rating-col">
                    Rating
                </div>
                <div class="col rating-col"  style="display: @((advancedView ? "block;" : "none;"))" >
                    Highest Rating
                </div>
                <div class="col record-col"  style="display: @((advancedView ? "block;" : "none;"))" >
                    Win Streak
                </div>
                <div class="col record-col"  style="display: @((advancedView ? "block;" : "none;"))" >
                    Highest Win Streak
                </div>
                <div class="col record-col">
                    Wins
                </div>
                <div class="col record-col">
                    Losses
                </div>
                <div class="col record-col">
                    Draws
                </div>
            </div>
        @foreach (var player in players)
        {
            <div class="row">
                <div class="col name-col">
                    @player.Player.Name
                </div>
                <div class="col"  style="display: @((advancedView ? "block;" : "none;"))" >
                    @player.Player.Id
                </div>
                <div class="col-auto rating-col">
                    @player.Stats.Rating
                </div>
                <div class="col rating-col"  style="display: @((advancedView ? "block;" : "none;"))" >
                    @player.Stats.HighestRating
                </div>
                <div class="col record-col">
                    @player.Stats.Wins
                </div>
                <div class="col record-col">
                    @player.Stats.Losses
                </div>
                <div class="col record-col">
                    @player.Stats.Draws
                </div>
                <div class="col-auto float-right"  style="margin-left: auto;">
                    <button @onclick="(() => StartGame(player.Player.Id))" class="btn btn-primary" >@((game.Light != 0 ?  game.Light == player.Player.Id ? "End Game" : "Player 2" : "Start Game"))</button>
                </div>
                @* <div class="col-auto float-right"  style="margin-left: auto;">
                    <button @onclick="(() => AdvancedViewOpen(player.Player))" class="btn btn-primary" >@((advancedView ? "Close View" : "Advanced view"))</button>
                </div> *@
            </div>
        }
    </div>
}
<button class="btn btn-primary" @onclick="modalPlayer.Show">Register New Player</button>
<a href="/CreateSeason" asp-page="/CreateSeason" class="btn btn-primary">Create Season</a>
@* <a href="/Tournament" asp-page="/Tournament" class="btn btn-primary">Go to Season</a> *@
@* <a href="/CreateTournament" asp-page="/CreateTournament" class="btn btn-primary">Create Tournament</a> *@
@* <a href="/Tournament" asp-page="/Tournament" class="btn btn-primary">Go to Tournament Page</a> *@


<!-- Register a Player --> 
<Modal @ref="modalPlayer" ModalTitle="Register a Player" >
    <RegisterPlayer modal="@modalPlayer">
    </RegisterPlayer>
</Modal>
<!-- Game a Player --> 
<Modal @ref="modalGame" ModalTitle="Register Game" >
    <RegisterGame modal="@modalGame" selectedSeason="@selectedSeason" game="game">
    </RegisterGame>
</Modal>

<!-- Live Game -->

@code {
    // List of players for standings
    public PlayerStats[]? players = null;
    public Season[]? seasonsList = null;
    public string selectedSeason = "loading";
    private Game game = new Game();
    // Season the screen is displaying
    private string errorMessage = string.Empty;
    private bool advancedView   = false;
    /* Sign Up Variables*/
    private Modal modalPlayer = new Modal();
    private Modal modalGame = new Modal();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get list of seasons
            var response = await Http.GetAsync("https://lrs-chess-ratings.com/seasons?with_deleted=false&page_id=0");
            response.EnsureSuccessStatusCode();
            seasonsList = JsonSerializer.Deserialize<SeasonsResponse>(await response.Content.ReadAsStringAsync(),
                                                                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true }).Items;

            selectedSeason = seasonsList[seasonsList.Length-1].ID.ToString();

            // If there are seasons get the list of players for the season
            if (seasonsList.Length != 0 && seasonsList != null)
            {

            var response2 = await Http.PostAsync("https://lrs-chess-ratings.com/season/" + selectedSeason + ":getParticipants", new StringContent("", System.Text.Encoding.UTF8, "application/json"));
            response2.EnsureSuccessStatusCode();

            players = JsonSerializer.Deserialize<PlayerStats[]>(await response2.Content.ReadAsStringAsync(),
                                                                 new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            } 
            
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error retrieving players. Please try again later.";
            // log or display the error message as needed
        }
        catch (JsonException ex)
        {
            errorMessage = "Error parsing player data. Please try again later.";
            // log or display the error message as needed
        }
        
    }
    public class SeasonsResponse
    {
        public Season[] Items { get; set; }
        public int NextPage { get; set; }
    }
    public class PlayerResponse
    {
        public PlayerStats[] Items { get; set; } = Array.Empty<PlayerStats>();
    }

    private void StartGame(uint PlayerID){
        // Player has been click twice, then close end game
        if (game.Light == PlayerID){
            game.Light = 0;
        }else
        // First Player has not been chosen
        if (game.Light == 0){
            game.Light = PlayerID;
        }else {
            game.Dark = PlayerID;
            modalGame.Show();
        }

    }

    public async void getParticitpants(){
        try
        {
            // Get list of seasons
            var response = await Http.GetAsync("https://lrs-chess-ratings.com/seasons?with_deleted=false&page_id=0");
            response.EnsureSuccessStatusCode();
            seasonsList = JsonSerializer.Deserialize<SeasonsResponse>(await response.Content.ReadAsStringAsync(),
                                                                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true }).Items;

            selectedSeason = seasonsList[seasonsList.Length-1].ID.ToString();

            // If there are seasons get the list of players for the season
            if (seasonsList.Length != 0 && seasonsList != null)
            {

            var response2 = await Http.PostAsync("https://lrs-chess-ratings.com/season/" + selectedSeason + ":getParticipants", new StringContent("", System.Text.Encoding.UTF8, "application/json"));
            response2.EnsureSuccessStatusCode();

            players = JsonSerializer.Deserialize<PlayerStats[]>(await response2.Content.ReadAsStringAsync(),
                                                                 new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            } 
            
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error retrieving players. Please try again later.";
            // log or display the error message as needed
        }
        catch (JsonException ex)
        {
            errorMessage = "Error parsing player data. Please try again later.";
            // log or display the error message as needed
        }
    }
    

}
