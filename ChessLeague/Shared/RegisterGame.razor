@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject HttpClient Http



<div class="" style="@(liveGame ? "display:block;" : "display:none;")">
    <div style="display: @(pickPlayerView?"flex":"none")">
        @if (participants != null && participants.Length > 0)
        {
            <select @bind="p1.Name">
                <option value="">-- Select Player 1 --</option>
                @foreach (var player in participants)
                {
                    <option value="@player.Player">@player.Player.Name</option>
                }
            </select>

            <select @bind="p2.Name">
                <option value="">-- Select Player 2 --</option>
                @foreach (var player in participants?.Where(p => p?.Player?.Id != p1?.Id))
                {
                    <option value="@player?.Player">@player?.Player?.Name</option>
                }
            </select>

            @if (p1?.Id == p2?.Id)
            {
                <p>The same player cannot be selected in both fields.</p>
            }

            <button @onclick="togglePickPlayerView" class="btn btn-primary">Next Page</button>
        }
    </div>
    <div style="display: @(pickPlayerView?"none":"flex")">
        <div class="container" >
        
        <div class="row justify-content-center">
            <button type="submit" class="Winner-btn @((game.Light == p1.Id ? "light" : "dark"))" @onclick="(() => CreateGame(game.Light == p1.Id ? (uint)1 : (uint)2))" >@p1.Name Wins!</button>

            <button type="submit" class="Winner-btn @((game.Light == p2.Id ? "light" : "dark"))" @onclick="(() => CreateGame(game.Light == p2.Id ? (uint)1 : (uint)2))">@p2.Name  Wins!</button>

        </div>
        
        <div class="row justify-content-center">
            <textarea class="Desc-field" @bind="game.Desc" placeholder="Enter games description here" />
            <textarea class="Desc-field" @bind="game.PGN" placeholder="Paste PGN Here" />
        </div>

        <div class="row justify-content-center">

            <button type="submit" class="Create-Game-btn btn btn-primary" @onclick="(() => CreateGame(3))" >Draw</button>
        </div>
        
        <div class="row justify-content-center">
            <input class="datetime-local" type="datetime-local" @bind="dateTimeValue">
            <button type="submit" class="Create-Game-btn btn btn-primary" @onclick="(() => CreateGame(4))" >Submit Scheduled Game</button>
        </div>
        
        </div>
        <div class="modal-footer justify-content-center" style="border:none;">
            <label>
                <input type="checkbox" @bind=isExhibition />
                Exhibition game
            </label>
            <button type="button" class="btn btn-primary" @onclick="SwitchColors">Switch Colors</button>
            @* <button type="button" class="btn btn-primary" @onclick="RandomColors">Random Colors</button> *@
            <button type="button" class="btn btn-primary" @onclick="modal.Close">Cancel</button>
        </div>
    </div>
</div>

@code {
    
    /* Game variables*/
    [Parameter]
    public Modal? modal { get; set; }
    [Parameter]
    public Season? season { get; set; } 
    [Parameter]
    public Game? game { get; set; }
    [Parameter]
    public Player? p1 {get; set;}
    [Parameter]
    public Player? p2 {get; set;}
    [Parameter]
    public DateTime dateTimeValue {get; set;}
    [Parameter]
    public PlayerStats[]? participants {get; set;}
    
    public bool pickPlayerView {get; set;} = true;


    /*  */
    private bool liveGame = true;
    private bool isExhibition = false;

    public async Task CreateGame(uint State)
    {
        dateTimeValue.AddHours(5.0);
        if ((dateTimeValue.CompareTo(season?.StartDate) <= 0
        ||  dateTimeValue.CompareTo(season?.EndDate) >= 0)
        &&  !isExhibition)
        {
            @* modal.ModalTitle = "***Game Date must be within Season start and end Date***"; *@
            dateTimeValue = DateTime.UtcNow.AddHours(-5.0);
        }else {
            game.State = State;

            
            if (isExhibition){
                game.SeasonId = 0;
            }else{
                game.SeasonId = season.ID;
            }
            game.TimePlayed = dateTimeValue.ToString("yyyy-MM-ddTHH:mm:ss") + ".000-00:00";//2023-05-01T03:01:33.262-05:00  = yyyy-MM-ddTHH:mm:ss.fffzzz

            if(game.ID == 0){
                string temp =await Request.SendPostRequest("game", JsonSerializer.Serialize(game));
            }else{
                string temp =await Request.SendUpdateRequest("/game/" + game.ID, JsonSerializer.Serialize(game));
            }

            // IF not a scheduled Game Make a rquest to update ratings
            if (!isExhibition){
                // Update Season Request
                Console.WriteLine("Updating Ratings");
                await Request.SendPostRequest("season/" + season.ID.ToString() + ":updateRatings", "");
            }
            game = new Game();
            p1 = new Player();
            p2 = new Player();
            
            modal.Close();
        }
        
    }

    private void SwitchColors(){
        uint temp  = game.Light;
        game.Light = game.Dark;
        game.Dark  = temp;
        
        @* Player tempPlayer  = p1;
        p1 = p2;
        p2 = tempPlayer; *@
    }
    @* private void RandomColors(){
        Random random = new Random();
        int duration = random.Next(3000, 5000); // Generate a random duration between 3000ms and 5000ms

        DateTime startTime = DateTime.Now;

        for (int i = 0; ; i++)
        {
            // Perform loop operations here

            if ((DateTime.Now - startTime).TotalMilliseconds >= duration)
                break;

            // Optionally, you can add a delay between loop iterations
            // to avoid high CPU usage. Adjust the value as needed.
            Thread.Sleep(i+400);
            SwitchColors();
            StateHasChanged();
        }
    } *@
    public void togglePickPlayerView(){
        Console.WriteLine(p1.Id);
        Console.WriteLine(p2.Id);
        if (p1 != null && p1.Id != 0 && p2 != null && p2.Id != 0 ){
            pickPlayerView = pickPlayerView ? false : true;
        }
    }
}