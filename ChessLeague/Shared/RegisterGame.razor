@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@inject HttpClient Http


<div class="" style="@(liveGame ? "display:block;" : "display:none;")">

    <div class="container" >
    
    <div class="row justify-content-center">

        <button type="submit" class="Winner-btn @((game.Light == p1.Id ? "light" : "dark"))" @onclick="(() => CreateGame(game.Light == p1.Id ? (uint)1 : (uint)2))" >@p1.Name Wins!</button>

        <button type="submit" class="Winner-btn @((game.Light == p2.Id ? "light" : "dark"))" @onclick="(() => CreateGame(game.Light == p1.Id ? (uint)1 : (uint)2))">@p2.Name  Wins!</button>


    </div>
    
    <div class="row justify-content-center">
        <textarea class="Desc-field" @bind="game.Desc" placeholder="Enter games description here" />
        <textarea class="Desc-field" @bind="game.PGN" placeholder="Paste PGN Here" />
    </div>

    <div class="row justify-content-center">

        <button type="submit" class="Create-Game-btn btn btn-primary" @onclick="(() => CreateGame(3))" >Draw</button>
    </div>
    
    <div class="row justify-content-center">
        <input class="datetime-local" type="datetime-local" @bind="dateTimeValue">
        <button type="submit" class="Create-Game-btn btn btn-primary" @onclick="(() => CreateGame(4))" >Submit Scheduled Game</button>
    </div>
    
    </div>
    <div class="modal-footer justify-content-center" style="border:none;">
        <label>
            <input type="checkbox" @bind=isExhibition />
            Exhibition game
        </label>
        <button type="button" class="btn btn-primary" @onclick="SwitchColors">Switch Colors</button>
        @* <button type="button" class="btn btn-primary" @onclick="RandomColors">Random Colors</button> *@
        <button type="button" class="btn btn-primary" @onclick="modal.Close">Cancel</button>
    </div>
</div>

@code {
    
    /* Game variables*/
    [Parameter]
    public Modal modal { get; set; }
    [Parameter]
    public string selectedSeason { get; set; } 
    [Parameter]
    public Game game { get; set; }
    [Parameter]
    public Player? p1 {get; set;}
    [Parameter]
    public Player? p2 {get; set;}



    
    /*  */
    private bool liveGame = true;
    private bool isExhibition = false;
    private DateTime dateTimeValue = DateTime.UtcNow.AddHours(-5.0);

    public async Task CreateGame(uint State)
    {
        game.State = State;

        
        if (isExhibition){
            game.SeasonId = 0;
        }else{
            game.SeasonId = uint.Parse(selectedSeason);
        }
        dateTimeValue.AddHours(5.0);
        game.TimePlayed = dateTimeValue.ToString("yyyy-MM-ddTHH:mm:ss") + ".000-05:00";//2023-05-01T03:01:33.262-05:00  = yyyy-MM-ddTHH:mm:ss.fffzzz
        @* Console.WriteLine("game.TimePlayed:" + game.TimePlayed);
        Console.WriteLine("game.State:" + game.State);
        Console.WriteLine("game.SeasonID:" + game.SeasonId);
        Console.WriteLine("game.Desc:" + game.Desc);
        Console.WriteLine("game.Light:" + game.Light);
        Console.WriteLine("game.Dark:" + game.Dark); *@


        try{
            var content = new StringContent(JsonSerializer.Serialize(game), System.Text.Encoding.UTF8, "application/json");

            var response = await Http.PostAsync("https://lrs-chess-ratings.com/game", content);
            response.EnsureSuccessStatusCode(); 

            response = null;

            // IF not a scheduled Game Make a rquest to update ratings
            if (!isExhibition){
            response = await Http.PostAsync("https://lrs-chess-ratings.com/season/" + selectedSeason + ":updateRatings",
                                new StringContent("", System.Text.Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            }

            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            // log or display the error message as needed
        }
        catch (JsonException ex)
        {
            // log or display the error message as needed
        }
        modal.Close();
    }

    private void SwitchColors(){
        uint temp  = game.Light;
        game.Light = game.Dark;
        game.Dark  = temp;
    }
    private void RandomColors(){
        uint temp  = game.Light;
        game.Light = game.Dark;
        game.Dark  = temp;
    }
}